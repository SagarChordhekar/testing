import { Component, OnInit, ViewEncapsulation } from "@angular/core";
import { NgbCarouselConfig } from "@ng-bootstrap/ng-bootstrap";
import { Router } from "@angular/router";
import { HomePageService } from "./homepage.service";

const baseUrl: string = config.url;
import { config } from "config";
@Component({
  selector: "app-homepage",
  templateUrl: "./homepage.component.html",
  styleUrls: ["./homepage.component.css"],
  providers: [NgbCarouselConfig],
  encapsulation: ViewEncapsulation.None
})
export class HomepageComponent implements OnInit {
  showNavigationArrows = false;
  showNavigationIndicators = false;

  slides = [
    {
      img: "assets/images/1280_iXpress Logo_V2-23 (1).jpg",
      description:
        "iXpress Connect – A new way of Banking! Engage yourself in the revolutionary way of getting on-boarded for API based solutions and make your journey quick yet simple and seamless. iXpress Connect provides you a self-service platform to ‘design & develop’ and ‘test & try’ on the fly. Make changes, see what best suits your requirements with full freedom and go live when you are ready. Banking with ICICI, now at your fingertips."
    },
    { img: "assets/images/iXC_1-2-3.JPG" },
    {
      img: "assets/images/eCollection.png",
      description:
        "eCollections product enables a Corporate Customers to receive payments through NEFT/RTGS/IMPS/FT channels without disclosing their actual account number and also allows them to identify who has transferred funds on real time. Remitters use Virtual Account Numbers instead of actual numeric account number of the Corporate Customer. VAN is combination of unique code generated by Bank for the Corporate Customer and unique identifier assigned to remitter by the Corporate Customer. In this way, VAN becomes unique to each remitter and Corporate Customer can identify who is the remitter. The most widely used and seamless variant of this is API based eCollection. API based eCollection allows the Corporate Customers to integrate their systems with the Bank application using defined APIs to intimate Corporates on real time of inward transaction. Corporate Customers can validate data and instruct Bank if funds are to be accepted or rejected. Bank necessitates action in accordance with the response."
    },
    {
      img: "assets/images/iSurePay.png",
      description:"iSurePay product enables a Corporate Customers to receive payments through Cash, Cheque, DD, Pay Orders, and Fund Transfer. It also allows Corporates to identify the remitter on real time. iSurePay product allows the Corporate Customers to integrate their systems with the Bank application using defined APIs to intimate Corporates on real time whenever depositor is at ICICI Bank Branch for deposition. Corporate Customer can validate the details received from ICICI Bank regarding the deposition and validate whether funds are to be accepted or not. If Corporate Customer wants to accept funds then only transaction is processed further and acknowledgment is given to depositor. If Corporate Customer does not want to accept funds then transaction is not processed further and depositor is intimated of the same. The process is completed in two legs. In first leg, remitter and amount details are sent to Corporate Customer. Corporate Customer validates the details and responds to Bank informing next course of action. In second leg, Bank either processes transaction or rejects it and intimates to Corporate Customer as well as to depositor. Using the final confirmation from Bank, Corporate Customers can reconcile the details in ERP."
    }
    // { img: "assets/images/ecol1.png" },
    // { img: "assets/images/ecol2.png" },
    // { img: "assets/images/ecol3.png" },
    // { img: "assets/images/ecol4.png" },
    // { img: "assets/images/isure1.png" },
    // { img: "assets/images/isure2.png" }
  ];
  public slideConfig = {
    dots: false,
    infinite: false,
    nextArrow: '<div class="homenav-btn next-slide"></div>',
    prevArrow: '<div class="homenav-btn prev-slide"></div>',
    slidesToShow: 2,
    speed: 100,
    slidesToScroll: 1,
    autoplay: true,
    responsive: [
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2
        }
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1
        }
      }
    ]
  };

  options = {
    theme: "light", // two possible values: light, dark
    dir: "ltr", // two possible values: ltr, rtl
    layout: "vertical", // fixed value. shouldn't be changed.
    sidebartype: "full", // four possible values: full, iconbar, overlay, mini-sidebar
    sidebarpos: "fixed", // two possible values: fixed, absolute
    headerpos: "fixed", // two possible values: fixed, absolute
    boxed: "full", // two possible values: full, boxed
    navbarbg: "skin1", // six possible values: skin(1/2/3/4/5/6)
    sidebarbg: "skin6", // six possible values: skin(1/2/3/4/5/6)
    logobg: "skin6" // six possible values: skin(1/2/3/4/5/6)
  };
  productData: any;
  public navbarOpen: boolean;
  product: any;
  configURL = config.url;
  data;
  constructor(
    private router: Router,
    private homePageService: HomePageService
  ) {
    // customize default values of carousels used by this component tree
    //  config.interval = 100000;
    //  config.wrap = false;
    //  config.keyboard = false;
    //  config.pauseOnHover = false;
    //  config.showNavigationArrows = true;
    //  config.showNavigationIndicators = true;
  }

  ngOnInit() {
    localStorage.clear();
    this.homePageService.getProducts().then(data => {
      this.productData = data;
      // console.log("this.productData", this.productData);
    });
  }

  toggleNavbar() {
    this.navbarOpen = !this.navbarOpen;
  }
  clickSubscription() {
    alert("Please Select One of the featured products below.");
  }
  onClick(data) {
    console.log("Data ==>", data);
    localStorage.setItem("productId", data.productId);
    localStorage.setItem("productName", data.productName);
    localStorage.setItem("description", data.description);
    this.data = JSON.stringify(data);
    localStorage.setItem("productData", this.data);
    this.router.navigateByUrl("/authentication/Product");
  }

  slickInit(e) {
    // console.log("slick initialized");
  }

  breakpoint(e) {
    // console.log("breakpoint");
  }

  afterChange(e) {
    // console.log("afterChange");
  }

  beforeChange(e) {
    // console.log("beforeChange");
  }
}
